plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.30'
    id "com.github.davidmc24.gradle.plugin.avro-base" version "1.0.0"
}

group 'org.demo'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

ext {
    jerseyVersion = '2.19'
    kafkaVersion = '2.4.0'
    confluentVersion = '5.3.0'
    daggerVersion = "2.16"
}

repositories {
    mavenCentral()
    maven { url "https://packages.confluent.io/maven/" }
    maven { url "https://repo.maven.apache.org/maven2" }
    flatDir {
        dirs 'lib'
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.3.50'

    // https://mvnrepository.com/artifact/org.apache.avro/avro
    implementation group: 'org.apache.avro', name: 'avro', version: '1.10.0'
    // https://mvnrepository.com/artifact/org.glassfish.jersey.media/jersey-media-json-jackson
    implementation group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: '2.32'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-avro:2.12.0-rc2'

    implementation "org.apache.kafka:kafka-clients:$kafkaVersion"
    implementation group: 'io.confluent', name: 'kafka-avro-serializer', version: "$confluentVersion"
    implementation "org.apache.kafka:kafka-streams:$kafkaVersion"
    implementation "io.confluent:kafka-schema-registry:$confluentVersion"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.29'
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Common',
                'Implementation-Version': version,
                'Main-Class': 'integrationTests.CommonRunner'
    }
    baseName = project.name + '-all'
    from sourceSets.test.output
    //collect all dependencies
    from { configurations.testRuntime.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    exclude('META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA')
}

task renewAvro {
    doLast {
        delete "src/main/java/com/demo/model"
        copy {
            from "build/avro/com/demo/model"
            into "src/main/java/com/demo/model"
        }
    }
}

task generateAvro(type: com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask) {
    source("src/main/avro")
    include("**/**/*.avsc")
    outputDir = file("src/main/java")
}

renewAvro.dependsOn generateAvro
build.dependsOn renewAvro

avro {
    fieldVisibility = "PRIVATE"
}

test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}